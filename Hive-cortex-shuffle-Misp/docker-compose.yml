version: "3.8"
services:
  elasticsearch:
    image: 'docker.elastic.co/elasticsearch/elasticsearch:7.11.1'
    container_name: elasticsearch
    restart: unless-stopped
    ports:
      - '0.0.0.0:9200:9200'
    environment:
      - http.host=0.0.0.0
      - discovery.type=single-node
      - cluster.name=hive
      - script.allowed_types= inline
      - thread_pool.search.queue_size=100000
      - thread_pool.write.queue_size=10000
      - gateway.recover_after_nodes=1
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - 'ES_JAVA_OPTS=-Xms256m -Xmx256m'
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - ./vol/elasticsearch_data:/usr/share/elasticsearch/data
      - ./vol/elasticsearch_logs:/usr/share/elasticsearch/logs

  kibana:
    image: 'docker.elastic.co/kibana/kibana:7.11.1'
    container_name: kibana
    restart: unless-stopped
    depends_on:
      - elasticsearch
    ports:
      - '5601:5601'

  cortex:
    image: 'thehiveproject/cortex:latest'
    container_name: cortex
    restart: unless-stopped
    volumes:
      - ./cortex/application.conf:/etc/cortex/application.conf
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp:/tmp
    environment:
      - http_proxy=${http_proxy}
      - https_proxy=${https_proxy}      
    depends_on:
      - elasticsearch
    ports:
      - '0.0.0.0:9001:9001'

  cassandra:
    image: cassandra:3.11
    container_name: cassandra
    restart: unless-stopped
    hostname: cassandra
    environment:
      - MAX_HEAP_SIZE=1G
      - HEAP_NEWSIZE=1G
      - CASSANDRA_CLUSTER_NAME=thp
    volumes:
      - ./vol/cassandra-data:/var/lib/cassandra/data

  thehive:
    image: 'thehiveproject/thehive:latest'
    container_name: thehive
    restart: unless-stopped
    depends_on:
      - cassandra
    ports:
      - '0.0.0.0:9000:9000'
    volumes:
      - ./thehive/application.conf:/etc/thehive/application.conf
      - ./vol/data:/opt/data
      - ./vol/index:/opt/index
    command: '--no-config --no-config-secret'

  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped

  db:
    # We use MariaDB because it supports ARM and has the expected collations
    image: mariadb:10.11
    restart: always
    environment:
      - "MYSQL_USER=${MYSQL_USER:-misp}"
      - "MYSQL_PASSWORD=${MYSQL_PASSWORD:-example}"
      - "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-password}"
      - "MYSQL_DATABASE=${MYSQL_DATABASE:-misp}"
    volumes:
      - mysql_data:/var/lib/mysql
    cap_add:
      - SYS_NICE  # CAP_SYS_NICE Prevent runaway mysql log
    healthcheck:
      test: mysqladmin --user=$$MYSQL_USER --password=$$MYSQL_PASSWORD status
      interval: 2s
      timeout: 1s
      retries: 3
      start_period: 30s


  misp-core:
    restart: on-failure
    image: ghcr.io/misp/misp-docker/misp-core:latest
    build:
      context: core/.
      args:
          - CORE_TAG=${CORE_TAG:?Missing .env file, see README.md for instructions}
          - CORE_COMMIT=${CORE_COMMIT}
          - PHP_VER=${PHP_VER:?Missing .env file, see README.md for instructions}
          - PYPI_REDIS_VERSION=${PYPI_REDIS_VERSION}
          - PYPI_LIEF_VERSION=${PYPI_LIEF_VERSION}
          - PYPI_PYDEEP2_VERSION=${PYPI_PYDEEP2_VERSION}
          - PYPI_PYTHON_MAGIC_VERSION=${PYPI_PYTHON_MAGIC_VERSION}
          - PYPI_MISP_LIB_STIX2_VERSION=${PYPI_MISP_LIB_STIX2_VERSION}
          - PYPI_MAEC_VERSION=${PYPI_MAEC_VERSION}
          - PYPI_MIXBOX_VERSION=${PYPI_MIXBOX_VERSION}
          - PYPI_CYBOX_VERSION=${PYPI_CYBOX_VERSION}
          - PYPI_PYMISP_VERSION=${PYPI_PYMISP_VERSION}
    healthcheck:
      test: curl -ks https://localhost/users/login > /dev/null || exit 1
      interval: 2s
      timeout: 1s
      retries: 3
      start_period: 30s
    ports:
      - "443:443"
    volumes:
      - "./configs/:/var/www/MISP/app/Config/"
      - "./logs/:/var/www/MISP/app/tmp/logs/"
      - "./files/:/var/www/MISP/app/files/"
      - "./ssl/:/etc/nginx/certs/"
      - "./gnupg/:/var/www/MISP/.gnupg/"
      # customize by replacing ${CUSTOM_PATH} with a path containing 'files/customize_misp.sh'
      # - "${CUSTOM_PATH}/:/custom/"
      # mount custom ca root certificates
      # - "./rootca.pem:/usr/local/share/ca-certificates/rootca.crt"
    environment:
      - "BASE_URL=${BASE_URL}"
      - "CRON_USER_ID=${CRON_USER_ID}"
      - "DISABLE_IPV6=${DISABLE_IPV6}"
      - "DISABLE_SSL_REDIRECT=${DISABLE_SSL_REDIRECT}"
      # standard settings
      - "ADMIN_EMAIL=${ADMIN_EMAIL}"
      - "ADMIN_PASSWORD=${ADMIN_PASSWORD}"
      - "ADMIN_KEY=${ADMIN_KEY}"
      - "ADMIN_ORG=${ADMIN_ORG}"
      - "GPG_PASSPHRASE=${GPG_PASSPHRASE}"
      # OIDC authentication settings
      - "OIDC_ENABLE=${OIDC_ENABLE}"
      - "OIDC_PROVIDER_URL=${OIDC_PROVIDER_URL}"
      - "OIDC_CLIENT_ID=${OIDC_CLIENT_ID}"
      - "OIDC_CLIENT_SECRET=${OIDC_CLIENT_SECRET}"
      - "OIDC_ROLES_PROPERTY=${OIDC_ROLES_PROPERTY}"
      - "OIDC_ROLES_MAPPING=${OIDC_ROLES_MAPPING}"
      - "OIDC_DEFAULT_ORG=${OIDC_DEFAULT_ORG}"
      # LDAP authentication settings
      - "LDAP_ENABLE=${LDAP_ENABLE}"
      - "LDAP_APACHE_ENV=${LDAP_APACHE_ENV}"
      - "LDAP_SERVER=${LDAP_SERVER}"
      - "LDAP_STARTTLS=${LDAP_STARTTLS}"
      - "LDAP_READER_USER=${LDAP_READER_USER}"
      - "LDAP_READER_PASSWORD=${LDAP_READER_PASSWORD}"
      - "LDAP_DN=${LDAP_DN}"
      - "LDAP_SEARCH_FILTER=${LDAP_SEARCH_FILTER}"
      - "LDAP_SEARCH_ATTRIBUTE=${LDAP_SEARCH_ATTRIBUTE}"
      - "LDAP_FILTER=${LDAP_FILTER}"
      - "LDAP_DEFAULT_ROLE_ID=${LDAP_DEFAULT_ROLE_ID}"
      - "LDAP_DEFAULT_ORG=${LDAP_DEFAULT_ORG}"
      - "LDAP_EMAIL_FIELD=${LDAP_EMAIL_FIELD}"
      - "LDAP_OPT_PROTOCOL_VERSION=${LDAP_OPT_PROTOCOL_VERSION}"
      - "LDAP_OPT_NETWORK_TIMEOUT=${LDAP_OPT_NETWORK_TIMEOUT}"
      - "LDAP_OPT_REFERRALS=${LDAP_OPT_REFERRALS}"
      # AAD authentication settings
      - "AAD_ENABLE=${AAD_ENABLE}"
      - "AAD_CLIENT_ID=${AAD_CLIENT_ID}"
      - "AAD_TENANT_ID=${AAD_TENANT_ID}"
      - "AAD_CLIENT_SECRET=${AAD_CLIENT_SECRET}"
      - "AAD_REDIRECT_URI=${AAD_REDIRECT_URI}"
      - "AAD_PROVIDER=${AAD_PROVIDER}"
      - "AAD_PROVIDER_USER=${AAD_PROVIDER_USER}"
      - "AAD_MISP_USER=${AAD_MISP_USER}"
      - "AAD_MISP_ORGADMIN=${AAD_MISP_ORGADMIN}"
      - "AAD_MISP_SITEADMIN=${AAD_MISP_SITEADMIN}"
      - "AAD_CHECK_GROUPS=${AAD_CHECK_GROUPS}"
      # sync server settings (see https://www.misp-project.org/openapi/#tag/Servers for more options)
      - "SYNCSERVERS=${SYNCSERVERS}"
      - |
        SYNCSERVERS_1_DATA=
        {
          "remote_org_uuid": "${SYNCSERVERS_1_UUID}",
          "name": "${SYNCSERVERS_1_NAME}",
          "authkey": "${SYNCSERVERS_1_KEY}",
          "url": "${SYNCSERVERS_1_URL}",
          "pull": true
        }
      # mysql settings
      - "MYSQL_HOST=${MYSQL_HOST:-db}"
      - "MYSQL_PORT=${MYSQL_PORT:-3306}"
      - "MYSQL_USER=${MYSQL_USER:-misp}"
      - "MYSQL_PASSWORD=${MYSQL_PASSWORD:-example}"
      - "MYSQL_DATABASE=${MYSQL_DATABASE:-misp}"
  
  
  misp-modules:
    restart: on-failure
    image: ghcr.io/misp/misp-docker/misp-modules:latest
    build:
      context: modules/.
      args:
        - MODULES_TAG=${MODULES_TAG:?Missing .env file, see README.md for instructions}
        - MODULES_COMMIT=${MODULES_COMMIT}
        - LIBFAUP_COMMIT=${LIBFAUP_COMMIT:?Missing .env file, see README.md for instructions}
    environment:
      - "REDIS_BACKEND=redis"


#READY FOR AUTOMATION ?
  frontend:
    image: ghcr.io/frikky/shuffle-frontend:0.8.64
    container_name: shuffle-frontend
    hostname: shuffle-frontend
    ports:
      - "3080:80"
      - "3443:443"
    environment:
      - BACKEND_HOSTNAME=shuffle-backend
    restart: unless-stopped
    depends_on:
      - backend
  
  backend:
    image: ghcr.io/frikky/shuffle-backend:0.8.64
    container_name: shuffle-backend
    hostname: shuffle-backend
    ports:
      - "5001:5001"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./vol/shuffle-apps:/shuffle-apps
      - ./vol/shuffle-files:/shuffle-files
    environment:
      - DATASTORE_EMULATOR_HOST=shuffle-database:8000
      - SHUFFLE_APP_HOTLOAD_FOLDER=./shuffle-apps
      - SHUFFLE_FILE_LOCATION=./shuffle-files
      - ORG_ID=Shuffle
      - SHUFFLE_APP_DOWNLOAD_LOCATION=https://github.com/frikky/shuffle-apps
      - SHUFFLE_DEFAULT_USERNAME=admin
      - SHUFFLE_DEFAULT_PASSWORD=password
      - SHUFFLE_DEFAULT_APIKEY=mysecretkey
      - SHUFFLE_APP_FORCE_UPDATE=false
      - HTTP_PROXY=
      - HTTPS_PROXY=
    restart: unless-stopped
    depends_on:
      - database
  
  orborus:
    image: ghcr.io/frikky/shuffle-orborus:0.8.63
    container_name: shuffle-orborus
    hostname: shuffle-orborus
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - SHUFFLE_APP_SDK_VERSION=0.8.60
      - SHUFFLE_WORKER_VERSION=0.8.63
      - ORG_ID=Shuffle
      - ENVIRONMENT_NAME=Shuffle
      - BASE_URL=http://shuffle-backend:5001
      - DOCKER_API_VERSION=1.40
      - HTTP_PROXY=
      - HTTPS_PROXY=
      - SHUFFLE_PASS_WORKER_PROXY=False
      - SHUFFLE_ORBORUS_EXECUTION_TIMEOUT=600
      - SHUFFLE_BASE_IMAGE_NAME=frikky
      - SHUFFLE_BASE_IMAGE_REGISTRY=ghcr.io
      - SHUFFLE_BASE_IMAGE_TAG_SUFFIX="-0.8.60"
      - CLEANUP=false      
    restart: unless-stopped
  
  database:
    image: frikky/shuffle:database
    container_name: shuffle-database
    hostname: shuffle-database
    ports:
      - "8000:8000"
    restart: unless-stopped
    volumes:
      - ./vol/shuffle-database:/etc/shuffle

volumes:
    mysql_data:


